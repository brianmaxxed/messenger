module.exports=function(e){var t={};function s(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,a){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(s.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(a,r,function(t){return e[t]}.bind(null,r));return a},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="./dist/public/",s(s.s=16)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});s(1);class a{static addProp(e,t){if(e in a){const t=`Constant class c already has property '${e}' assigned`;throw new Error(t)}Object.defineProperty(a,e,{value:t,writable:!1})}}a.addProp("LEAN",!0),a.addProp("TRUE","true"),a.addProp("FALSE","false"),a.addProp("INDEX","index"),a.addProp("UNIQUE","unique"),a.addProp("SPARSE","sparse"),a.addProp("NESTED","NESTED"),a.addProp("PAGE_LIMIT",1e3),a.addProp("PER_PAGE_LIMIT",20),a.addProp("MULTI_PER_PAGE_LIMIT",10),a.addProp("SIGINT","SIGINT"),a.addProp("SIGTERM","SIGTERM"),a.addProp("EMPTY_STR",""),a.addProp("OFFLINE","offline"),a.addProp("DISABLED","disabled"),a.addProp("SOFT_DELETE","softDelete"),a.addProp("OPEN","open"),a.addProp("EXIT","exit"),a.addProp("CONNECTING","connecting"),a.addProp("CONNECTED","connected"),a.addProp("DISCONNECTION","disconnecting"),a.addProp("DISCONNECTED","disconnected"),a.addProp("CLOSE","close"),a.addProp("RECONNECT","reconnected"),a.addProp("ERROR","error"),a.addProp("FULLSETUP","fullsetup"),a.addProp("ALL","all"),a.addProp("BOOLEAN","boolean"),a.addProp("OBJECT","object"),a.addProp("STRING","string"),a.addProp("FUNCTION","function"),a.addProp("NUMBER","number"),a.addProp("UNDEFINED","undefined"),a.addProp("INSERT","insert"),a.addProp("UPDATE","update"),a.addProp("DELETE","delete"),Object.freeze(a),t.default=a},function(e,t,s){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){return e&&e.__esModule?e:{default:e}}(s(10));s(11).load({path:a.default.join(e,"../../.env"),sample:a.default.join(e,"../../.env.example")});const r={user:"brian",appName:"messengerBackend",debug:!1,debugLevel:"debug",debugDb:!1,debugExpress:!1,debugUnitTests:!1,stackTraceUnhandledErrors:!0,unitTestDbSuffix:"TEST_brian",host:"localhost",domain:process.env.DOMAIN,environment:"dev",port:"3000",mongo:{dbName:null,uri:null}};"test"==="dev".toLowerCase()&&process.env.TEST_ENV;r.mongo.dbName="authed",r.mongo.uri="mongodb+srv://authed1:authed1@devsizelrauth0-omvzv.mongodb.net",t.default=r}).call(this,"src/config")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(s(15)),r=n(s(0));function n(e){return e&&e.__esModule?e:{default:e}}class o{}o.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},o.SUCCESS={id:1,status:200,msg:a.default.OK},o.SUCCESSFUL_LOGIN={id:22,status:201,msg:"successfully logged in."},o.SUCCESSFUL_LOGOUT={id:22,status:205,msg:"successfully logged out."},o.SUCCESSFUL_UPDATE_WITH_TOKEN={id:22,status:298,msg:"successful update. new token returned."},o.SUCCESSFUL_UPDATE={id:22,status:299,msg:"successful update."},o.INVALID_PAGE={id:22,status:422,msg:"the page param must be an integer within 1 and 1000."},o.PASSWORD_VERIFIED={id:400,status:200,msg:"the password has been verified."},o.EMAIL_VERIFIED={id:400,status:422,msg:"the email has been verified."},o.EMAIL_ALREADY_VERIFIED={id:400,status:422,msg:"the email has already been verified."},o.UPDATE_COMPLETED={id:200,status:200,msg:"The updated has complete."},o.UPDATE_COMPLETED_WITH_LOGOUT={id:200,status:200,msg:"The updated has complete. user is logged out."},o.SIGNUP_COMPLETE={id:202,status:200,msg:"signup is complete. confirm email, and login with credentials."},o.SIGNUP_NOT_COMPLETE={id:999,status:470,msg:"signup is not complete. check your input fields and re-submit."},o.NO_EXTRA_FIELDS={id:200,status:445,msg:"do not include invalid fields."},o.REMEMBERED_LOGGED_IN_INVALID={id:200,status:446,msg:"rememberLoggedIn param must be boolean true or false."},o.MUST_AUTHENTICATE={id:400,status:421,msg:"please enter login credentials."},o.CONTACT_LIMIT_REACHED={id:400,status:421,msg:"you have reached the maximum contacts allowed."},o.SPECIFY_CONTACT_INDEX={id:400,status:421,msg:"you must specify a valid contact index."},o.SPECIFY_VERIFY_CODE={id:400,status:421,msg:"you must specify a valid verification code."},o.NO_VERIFY_CODE_IN_USE={id:400,status:421,msg:"invalid; please request a new verification code."},o.NOT_A_BOOLEAN={id:400,status:421,msg:"value must be true or false."},o.INVALID_VERIFY_CODE={id:400,status:421,msg:"invalid verification code."},o.EMAIL_VERIFIED={id:200,status:221,msg:"email has been verified."},o.OLD_EMAIL_REQUIRED={id:400,status:221,msg:"current email is required."},o.NEW_EMAIL_REQUIRED={id:400,status:421,msg:"new email is required."},o.EMAIL_NOT_FOUND={id:400,status:421,msg:"that email was not found."},o.OLD_EMAIL_NOT_FOUND={id:400,status:421,msg:"current email was not found."},o.NEW_EMAIL_IN_USE={id:400,status:421,msg:"new email is already in use."},o.SPECIFY_OLD_EMAIL={id:400,status:421,msg:"current email is required."},o.SPECIFY_NEW_EMAIL={id:400,status:421,msg:"new email is required."},o.SPECIFY_OLD_ALT_EMAIL={id:400,status:421,msg:"current alt email is required."},o.SPECIFY_NEW_ALT_EMAIL={id:400,status:421,msg:"new alt email is required."},o.CANT_DELETE_PRIMARY_CONTACT={id:400,status:421,msg:"cannot delete the primary contact."},o.PROFILE_NAME_IN_USE={id:400,status:421,msg:"you have already used that profile name."},o.SUBSCRIPTION_ID_IN_USE={id:400,status:421,msg:"you have already added that subscription."},o.SUBSCRIPTION_ID_NOT_FOUND={id:400,status:421,msg:"you do not have that subscription."},o.SERVICE_ID_IN_USE={id:400,status:421,msg:"you have already added that service."},o.SERVICE_ID_NOT_FOUND={id:400,status:421,msg:"you do not have that service."},o.SUBSCRIPTION_ALREADY_CANCELLED={id:400,status:421,msg:"subscription already cancelled."},o.SUBSCRIPTION_ALREADY_RESUMED={id:400,status:421,msg:"subscription already resumed."},o.SUBSCRIPTION_ALREADY_PAUSED={id:400,status:421,msg:"subscription already paused."},o.PROFILE_ID_NOT_FOUND={id:400,status:421,msg:"that profile id was not found."},o.PAYMENT_ID_NOT_FOUND={id:400,status:421,msg:"that payment id was not found."},o.INVALID_PROFILE_ID={id:400,status:421,msg:"that profile id is invalid"},o.PROFILE_LIMIT_REACHED={id:400,status:421,msg:"you have reached the maximum profiles allowed."},o.SPECIFY_PROFILE_INDEX={id:400,status:421,msg:"you must specify a valid profile index."},o.SPECIFY_NEW_USERNAME={id:400,status:421,msg:"you must specify a valid new username."},o.SPECIFY_PROFILE_ID={id:400,status:421,msg:"you must specify a valid profile id."},o.SPECIFY_DEVICE_ID={id:400,status:421,msg:"you must specify a valid device id."},o.SPECIFY_DEVICE_ID={id:400,status:421,msg:"you must specify a valid device id."},o.INVALID_DEVICE_ACTIVATION_CODE={id:400,status:421,msg:"invalid device activation code."},o.DEVICE_ALREADY_ACTIVATED={id:400,status:421,msg:"device already activated."},o.CANT_DELETE_PRIMARY_PROFILE={id:400,status:421,msg:"cannot delete the main profile."},o.SPECIFY_ONE_SETTING={id:400,status:421,msg:"you must specify one setting."},o.SPECIFY_ONE_INDEX={id:400,status:421,msg:"you must specify one valid index."},o.INVALID_SETTING_VALUE={id:400,status:421,msg:"invalid setting value."},o.INVALID_SETTING_STORE={id:400,status:421,msg:"invalid setting store."},o.SPECIFY_SETTINGS={id:400,status:421,msg:"you must specify settings."},o.INVALID_SETTINGS={id:400,status:421,msg:"invalid settings."},o.INVALID_SETTING={id:400,status:421,msg:"specified an invalid setting."},o.PROPERTY_NOT_WRITABLE={id:400,status:421,msg:"that setting is not writable"},o.PROPERTY_NOT_ENABLED={id:400,status:421,msg:"that setting is not enabled"},o.INVALID_PARAMETERS={id:400,status:421,msg:"payload contains invalid function parameters"},o.INVALID_SETTING_STORE_TYPE={id:400,status:421,msg:"that is not a valid setting store type."},o.PROPERTY_NOT_FOUND={id:400,status:421,msg:"that setting was not found."},o.INVALID_DEVICE_CREDENTIALS={id:400,status:418,msg:"invalid authentication credentials. no device found."},o.REQUIRED_EMAIL_OR_USERNAME={id:400,status:418,msg:"username or password is required, but not both."},o.DEVICE_REQUIRED={id:400,status:418,msg:"at least 1 valid device is required."},o.INVALID_USER={id:400,status:419,msg:"not authenticated. that is an invalid user."},o.INVALID_USERNAME={id:400,status:423,msg:"not authenticated. that is an invalid username. please login again."},o.NOT_AUTHENTICATED={id:400,status:400,msg:"not authenticated. please login first."},o.NOT_AUTHORIZED={id:400,status:401,msg:"not authenticated. please login first."},o.ALREADY_AUTHENTICATED={id:400,status:402,msg:"already authenticated. logout first."},o.PASSWORD_NOT_VERIFIED={id:400,status:302,msg:"the password is incorrect."},o.INVALID_AUTH_CREDENTIALS={id:400,status:410,msg:"invalid authentication credentials."},o.MUST_AGREE_TO_TERMS={id:400,status:414,msg:"you must agree to terms."},o.NEED_ALL_REQUIRED_FIELDS={id:400,status:411,msg:"please fill out all required fields."},o.FIELD_VALIDATION_ERRORS={id:400,status:449,msg:"field validation errors."},o.NEW_USERNAME_REQUIRED={id:400,status:499,msg:"the new username field is required."},o.PASSWORD_REQUIRED={id:400,status:499,msg:"the password is required."},o.NEW_PASSWORD_REQUIRED={id:400,status:499,msg:"the new password is required."},o.NEW_PASSWORD_CANNOT_BE_SAME={id:400,status:499,msg:"the new password cannot be the same as the old password."},o.OLD_PASSWORD_MUST_MATCH={id:400,status:499,msg:"the old password must match the current password."},o.OLD_PASSWORD_REQUIRED={id:400,status:499,msg:"the old password is required."},o.NEW_PASSWORD_FIELD_REQUIRED={id:400,status:499,msg:"the new password field is required."},o.USERNAME_ALREADY_EXISTS={id:400,status:498,msg:"that username already exists."},o.ACCOUNT_NOW_LOCKED={id:400,status:420,msg:"you have reached the maximum login attempts."+`your account is locked for ${r.default.LOCK_TIME/60} minutes.`},o.ACCOUNT_IS_LOCKED={id:400,status:420,msg:"this user is locked. See your email for the time it will be unlocked."},o.DISABLED_ACCOUNT={id:400,status:420,msg:"this account is disabled. contact support."},o.ACCOUNT_NOT_ACCESSIBLE={id:400,status:420,msg:"this account is not accessable. contact support."},o.INVALID_APP_ACCOUNT={id:400,status:499,msg:"invalid app account."},o.PROFANITY_REJECT_NAME={id:400,status:450,msg:"your name and username cannot contain profanity."},o.INVALID_INPUT={id:400,status:450,msg:"your name and username cannot contain profanity."},o.TESTING_ROUTE={id:200,status:298,msg:"testing route."},o.INVALID_ACCOUNT_ID={id:400,status:421,msg:"invalid account id."},Object.freeze(o),t.default=o},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("mongoose")},function(e,t){e.exports=require("express")},function(e,t,s){"use strict";o(s(7));var a=o(s(3)),r=(o(s(35)),o(s(8)),o(s(0)),o(s(2))),n=(o(s(36)),o(s(1)));function o(e){return e&&e.__esModule?e:{default:e}}const i=e=>{const t={};if(!e)return t;const{id:s=0,status:r=500,msg:n="internal error"}=e;if(t.id=s,t.status=r,t.msg=n,a.default.get(e,"errors"))t.errors=e.errors;else{t.errors=[];const a={error:{id:s,status:r,msg:n}};e.extra&&(a.extra=e.extra),t.errors.push(a)}return t},u=(e,t,s)=>{const r=Object.assign({},e);return r&&(r.error&&(r.errors?r.errors.push({msg:r.error.msg,stack:r.error.stack}):r.errors=[{error:r.error}],delete r.error,a.default.has(r,"status")||(r.status=r.errors[0].status||500)),t.type("json"),t.status(r.status||500).send(r)),t.headersSent||s(),r};e.exports={mapToArray:e=>{const t=[];return e.forEach((e,s,a)=>{t.push(e)}),t},wrapErrorCode:e=>[{error:e}],hasOnlyOne:(e={},t=[])=>{const s=t.filter(t=>t in e).map(t=>({field:t,value:e[t]}));return 1===s.length?s:[]},processResults:u,statusObject:(e,t={})=>{const{id:s,status:a,msg:r}=e;return{id:s,status:a,msg:r,data:t}},errorObject:i,unhandledErrorObject:e=>("production"!==n.default.environment||n.default.stackTraceUnhandledErrors?console.log(e.stack):console.log(`${e.message} ${e.extra}`),"production"!==n.default.environment||n.default.debug?i(e):i(r.default.INTERNAL_ERROR)),formatTimeLeft:e=>{const t=e/60>1?e/60:1;return`${t} minute${1!==t?"s":""}`},asynced:async(e,t,s)=>{const[a,r,n]=s,o=await e[t](a);return u(o,r,n),o},asyncForEachLinear:async(e,t)=>{for(const s of e)await t(s)},asyncForEach:async(e,t)=>{await Promise.all(e.map(t))}}},function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("uuid/v4")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={user:"user"}},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("dotenv-safe")},function(e,t){e.exports=require("http")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=function(e){return e&&e.__esModule?e:{default:e}}(s(29));class r{constructor(){this.models=r.all}static get all(){return{user:new a.default}}get all(){return Object.assign({},this.models)}}t.default=r},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=s(4),r=n(s(9));n(s(0));function n(e){return e&&e.__esModule?e:{default:e}}s(30)();const o=new a.Schema({userId:{type:String,required:!0},username:{type:String,minlength:2,maxlength:16},accountId:{type:String,required:!0},password:{type:String,required:!0,hideJSON:!0},mustChangePassword:{type:Boolean,hideJSON:!0},forcedLogout:{type:Boolean,hideJSON:!0},mustVerifyPassword:{type:Boolean,hideJSON:!0},image:{type:String},gravatarId:{type:String},agreementVersion:{type:Number,hideJSON:!0},offline:{type:Boolean},disabled:{type:Boolean},softDelete:{type:Boolean},archive:{type:Boolean}},{autoIndex:!1,timestamps:!0,collection:r.default.user});o.index({accountId:1,username:1},{unique:!0}),o.index({accountId:1,userId:1,"profiles.name":1},{unique:!0}),o.index({accountId:1,"profiles.profileId":1},{unique:!0}),o.index({accountId:1,"contacts.email":1},{unique:!0}),o.index({accountId:1,"contacts.altEmail":1},{unique:!0,partialFilterExpression:{"contacts.altEmail":{$type:"string"}}}),o.index({accountId:1,"devices.deviceId":1},{unique:!0,partialFilterExpression:{"contacts.deviceId":{$type:"string"}}}),o.index({paymentId:1},{unique:!0,partialFilterExpression:{"paymentMethods.paymentId":{$type:"string"}}}),o.pre("save",e=>{e()}),o.statics.findValidUser=async function(e={},t=!1,s={}){let a=null;try{a=await this.findOne(e,s).lean(t)}catch(e){console.log("Error: ",e.stack)}return!a||a.softDelete||a.archive?null:a},t.default=o},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class a{}a.OK="OK",t.default=a},function(e,t,s){"use strict";var a=i(s(17)),r=i(s(1)),n=i(s(0)),o=s(18);function i(e){return e&&e.__esModule?e:{default:e}}r.default.debug&&a.default.install({environment:n.default.NODE}),r.default.debug&&s(39),process.on("SIGTERM",()=>{console.log("SIGTERM"),(0,o.shutdown)()}),process.on("SIGINT",()=>{console.log("SIGINT"),(0,o.shutdown)()}),(0,o.startup)(),e.exports={app:o.app,server:o.server,startup:o.startup,shutdown:o.shutdown}},function(e,t){e.exports=require("source-map-support")},function(e,t,s){"use strict";g(s(3));var a=g(s(5)),r=g(s(4)),n=g(s(12)),o=g(s(19)),i=g(s(20)),u=g(s(21)),d=(g(s(22)),g(s(23))),l=(g(s(10)),g(s(24)),g(s(25))),c=g(s(26)),f=(g(s(27)),g(s(0))),E=g(s(28)),m=g(s(1)),_=g(s(37));function g(e){return e&&e.__esModule?e:{default:e}}s(11).config();let p=null;const I=(0,a.default)();I.use((0,d.default)()),I.disable("x-powered-by"),I.use((0,c.default)()),I.use((0,l.default)()),I.use((0,u.default)({origin:"*",credentials:!0,optionsSuccessStatus:200,allowedHeaders:["Content-Type","Authorization","Accept","Accept-Encoding"]})),I.use(o.default.urlencoded({extended:!1})),I.use((e,t,s)=>{o.default.json({verify(e,t,s,a){e.rawBody=s.toString()}})(e,t,e=>{if(e){const s=-1!==e.message.indexOf("JSON")?e.message:"internal error";t.status(500).send({error:{status:500,msg:s}}),console.log(f.default.ERROR,{status:e.status||500,message:e.msg,error:e})}else s()})}),I.use((0,i.default)()),I.set("trust proxy",!0),I.set(f.default.PORT,m.default.port),m.default.debug&&m.default.debugExpress&&console.log("Overriding 'Express' logger"),I.use(_.default),e.exports={app:I,httpServer:p,startup:async e=>{try{const t=e||I.get(f.default.PORT);E.default.setDebug(m.default.debug),await E.default.connect(),(p=n.default.createServer(I)).listen(t),console.log("listening at http://%s:%d",m.default.host,t)}catch(e){console.log("Error: ",e.stack)}return p},shutdown:async(e=!0)=>{console.log(`app '${m.default.appName}' terminating.`),console.log("closing server...");try{await p.close(),console.log("express server close."),await r.default.connection.close(),console.log("Mongoose default connection disconnected."),r.default.connection.removeAllListeners()}catch(e){console.log("Uncaught Shutdown Error:",e.stack)}return console.log("Finally exiting."),e&&process.exit(1),null}}},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("csurf")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("response-time")},function(e,t){e.exports=require("method-override")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=u(s(4)),r=u(s(13)),n=u(s(1)),o=u(s(0)),i=u(s(6));function u(e){return e&&e.__esModule?e:{default:e}}const d={db:null,test:!1};t.default={get:()=>d.db,setAsTest:()=>{d.test=!0},setDebug:e=>{n.default.debugDb&&(a.default.connection.removeAllListeners(),a.default.set(o.default.DEBUG,!0),n.default.debug&&console.log(`starting in debug mode; env=${n.default.environment}`),[o.default.CONNECTING,o.default.CONNECTED,o.default.OPEN,o.default.DISCONNECTING,o.default.DISCONNECTED,o.default.CLOSE,o.default.RECONNECTED,o.default.ERROR,o.default.ALL,o.default.INDEX].forEach(e=>{a.default.connection.on(e,()=>{console.log(`Mongoose event ${e}`)})}))},connect:async(e,t)=>{const s=e||`${n.default.mongo.uri}`,r=t||`${n.default.mongo.dbName}`,o={dbName:r||n.default.mongo.dbName,reconnectTries:5,reconnectInterval:500,keepAlive:!0,config:{autoIndex:!1,background:!1}};n.default.debug&&(console.log(`mongo Uri: ${s}`),console.log(`mongo Db: ${r}`));try{const e=await a.default.connect(s,o);return d.db=e,d.db}catch(e){return console.log("Error: ",e.stack),null}},createIndexes:async()=>{try{const e=r.default.all;await i.default.asyncForEach(Object.keys(e),async t=>{e[t]&&e[t].Model&&(e[t].Model.collection&&(await e[t].Model.collection.getIndexes(),await e[t].Model.collection.dropIndexes()),await e[t].Model.createIndexes())})}catch(e){return console.log(e),i.default.unhandledErrorObject(e)}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});d(s(3));var a=d(s(4)),r=(d(s(7)),d(s(8)),d(s(14))),n=d(s(31)),o=(d(s(0)),d(s(2))),i=d(s(9)),u=d(s(6));d(s(1));function d(e){return e&&e.__esModule?e:{default:e}}class l extends n.default{static get Model(){return a.default.model(i.default.user,r.default)}get Model(){return l.Model}async ping(e={}){try{const e=await l.Model.find({},{username:1,_id:0}).limit(30).lean();return{status:o.default.SUCCESS.status,data:{message:e}}}catch(e){return u.default.unhandledErrorObject(e)}}}t.default=l},function(e,t){e.exports=require("mongoose-hidden")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=f(s(3)),r=f(s(4)),n=(f(s(7)),f(s(8))),o=f(s(14)),i=(f(s(32)),f(s(0))),u=f(s(2)),d=f(s(9)),l=s(6),c=f(l);f(s(1));function f(e){return e&&e.__esModule?e:{default:e}}class E{static get Model(){return r.default.model(d.default.user,o.default)}get Model(){return r.default.model(d.default.user,o.default)}isAuthN(e){return a.default.isObject(e)&&"auth"in e&&!1===e.auth.expired&&!0===e.auth.verified}isAuthZ(e,t){return this.isAuthN(e)?"user"===t||u.default.NOT_AUTHORIZED:u.default.NOT_AUTHENTICATED}securePayload(e){const t=Object.assign({},e);return delete t.password,t}async setProperty(){}async getProperty(){}async findValidUser(e={},t=!1,s={}){return await this.Model.findValidUser(e,t,s)}async getFreshAuthedUserDetails(e,t=!1){return this.getAuthedUserDetails(e,i.default.REFRESH_FROM_DB,t)}async getAuthedUserDetails(e,t=!1,s=!1){if(!this.isAuthN(e))return{valid:!1,error:u.default.NOT_AUTHENTICATED};const a={valid:!0,auth:e.auth};if(t){const{accountId:t,sub:r}=e.auth.payload,n=await this.findValidUser({accountId:t,userId:r},s);if(!n)return Object.assign(a,{valid:!1,error:u.default.INVALID_USER});a.user=n}return a}async checkContactInfo(e,t={}){const s={valid:!1};if(!this.hasRequired(t,["email","firstName","lastName"]))return s.errors=(0,l.errorObject)(u.default.NEED_ALL_REQUIRED_FIELDS),s;const a=["email","altEmail","firstName","middleName","lastName","displayName","title","phone","timezone","birthdate","gender"];return Object.keys(t).filter(e=>!a.includes(e)).length>0?(s.errors=(0,l.errorObject)(u.default.NO_EXTRA_FIELDS),s):(s.valid=!0,s)}async updateUserDeviceDocument(e,t,s,a=!1){const r=Object.assign({},s);a&&(r.refreshToken=void 0);const n=await E.Model.findOne({accountId:e,userId:t}),o=n.devices.findIndex(e=>e.deviceId===r.deviceId);if(o<0)return null;delete r.deviceId,Object.keys(r).forEach(e=>{n.devices[o][e]=r[e]});await n.save()}verifyProfile(e,t,s){const a={valid:!1,fields:[],errors:[]};return a.valid=!0,a}validateRequiredFields(e){const t=[];return!!e||(t.push({error:{type:"empty fields object",msg:"empty fields object"}}),{errors:t})}async checkForRequiredFieldsNotInUse(e,t){try{const s=t;if(!t||!t.email||!t.username)return null;const r={accountId:e,$and:[{$or:[]}]};s.email&&(s.email=s.email.toLowerCase(),r.$and[0].$or.push({"contacts.email":s.email})),s.username&&r.$and[0].$or.push({username:s.username});const n={"contacts.email":1,username:1,_id:0},o=await this.Model.find(r,n).lean();if(o&&o.length>0){const e={status:400,errors:[]},t=a.default.flatten(o.map(e=>a.default.flatten(e.contacts).map(t=>({username:e.username,email:t.email}))));if(Object.keys(s).forEach(a=>{t.forEach(t=>{s[a]===t[a]&&e.errors.push({error:{msg:`that ${a} '${t[a]}' is already taken.`}})})}),e.errors.length>0)return e}return!0}catch(e){return c.default.unhandledErrorObject(e)}}checkProfileInfo(e){return{valid:!1,errors:null}}isUserLocked(e){return a.default.get(e,"lockedUntil",0)>Date.now()}async getSecureUserData(e){let t;if(e)t=e;else if(!(t=await this.Model.findValidUser({accountId:e.accountId,userId:e.userId},i.default.LEAN)))return null;return t.password=void 0,t.devices.forEach((e,s)=>{t.devices[s].refreshToken=void 0}),t}async getUniqueId(e,t,s){try{let a={id:null,cnt:0};do{a.id=(0,n.default)().toString().replace(/-/g,""),await e.Model.findOne({userId:t.userId,accountId:t.accountId,[s]:a.id},Object.assign({_id:0},{[s]:1}))&&a.cnt<10&&(a={id:null,count:a.cnt+1})}while(!a.id);return a.id}catch(e){console.log(e)}}}t.default=E},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});a(s(5)),a(s(3)),a(s(0)),a(s(2)),a(s(33)),a(s(1));function a(e){return e&&e.__esModule?e:{default:e}}t.default=class{constructor(){this.M=null,this.query=null,this.seachLog="search_log",this.project={default:{credits:0,combined_credits:0,movie_credits:0,tv_credits:0,external_ids:0,production_companies:0,images:0,tagged_imaged:0,production_countries:0,reviews:0,videos:0,recommendations:0,similar:0,networks:0,adult:0,belongs_to_collection:0,spoken_languages:0,_id:0}}}}},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});!function(e){e&&e.__esModule}(s(1));const a=s(34).MongoClient,r={db:null},n=()=>r.db;t.default={close:async()=>{try{r.db&&(await r.db.close(),r.db=null,r.mode=null)}catch(e){return console.log("Error: ",e.stack),e}return null},collection:e=>n().collection(e),connect:async e=>{if(r.db)return r.db;try{const t=await a.connect(e);return r.db=t,console.log(t),t}catch(e){return console.log("Error: ",e.stack),e}},get:n}},function(e,t){e.exports=require("mongodb")},function(e,t){e.exports=require("util")},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});a(s(15)),a(s(0));function a(e){return e&&e.__esModule?e:{default:e}}class r{}r.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},r.ENUM_PROP_NOT_FOUND={id:10001,status:400,msg:"enum property does not exist."},r.INVALID_FIELD_SOURCE_TYPE={id:10001,status:400,msg:"invalid source field type, use: params or body."},r.INVALID_VALIDATION_FIELD={id:10002,status:400,msg:"that validation field is not in the validation map."},r.TEST={id:1,status:1,msg:"test"},Object.freeze(r),t.default=r},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=o(s(5)),r=(o(s(12)),o(s(0)),o(s(2)),o(s(38))),n=o(s(13));function o(e){return e&&e.__esModule?e:{default:e}}const i=a.default.Router(),u=n.default.all;i.get("/api/v1/en/ping",(e,t,s)=>{t.status(200).send("pinged")}),i.use("/api/v1/en/user",r.default.routes(u.user)),i.use((e,t,s)=>{const a=new Error("Not Found");a.status=404,s(a)}),i.use((e,t,s,a)=>{const r=e.status?e.status:500;let n=`${r}: ${e.message}`;Array.isArray(n)||(n=[n]);const o={errors:n};e.data&&(o.errors=e.data),s.status(r).send(o)}),t.default=i},function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(s(5)),r=(n(s(0)),n(s(2)),s(6));n(r);function n(e){return e&&e.__esModule?e:{default:e}}t.default=class{static routes(e){const t=a.default.Router();return t.get("/ping",async(...t)=>{await(0,r.asynced)(e,"ping",t)}),t}}},function(e,t,s){"use strict";var a=r(s(1));r(s(0));function r(e){return e&&e.__esModule?e:{default:e}}a.default.debug&&(process.on("unhandledRejection",(e,t)=>{console.log("unhandledRejection...");let s="";t&&(s=`Unhandled Rejection at: Promise${t}`),console.log("reason:",s,e)}),process.on("uncaughtException",e=>{console.log("Error: ",e.stack)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,