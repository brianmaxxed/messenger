module.exports=function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./dist/public/",r(r.s=14)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});r(1);class o{static addProp(e,t){if(e in o){const t=`Constant class c already has property '${e}' assigned`;throw new Error(t)}Object.defineProperty(o,e,{value:t,writable:!1})}}o.addProp("LEAN",!0),o.addProp("TRUE","true"),o.addProp("FALSE","false"),o.addProp("INDEX","index"),o.addProp("UNIQUE","unique"),o.addProp("SPARSE","sparse"),o.addProp("NESTED","NESTED"),o.addProp("PAGE_LIMIT",1e3),o.addProp("PER_PAGE_LIMIT",20),o.addProp("MULTI_PER_PAGE_LIMIT",10),o.addProp("SIGINT","SIGINT"),o.addProp("SIGTERM","SIGTERM"),o.addProp("EMPTY_STR",""),o.addProp("OFFLINE","offline"),o.addProp("DISABLED","disabled"),o.addProp("SOFT_DELETE","softDelete"),o.addProp("OPEN","open"),o.addProp("EXIT","exit"),o.addProp("CONNECTING","connecting"),o.addProp("CONNECTED","connected"),o.addProp("DISCONNECTION","disconnecting"),o.addProp("DISCONNECTED","disconnected"),o.addProp("CLOSE","close"),o.addProp("RECONNECT","reconnected"),o.addProp("ERROR","error"),o.addProp("FULLSETUP","fullsetup"),o.addProp("ALL","all"),o.addProp("BOOLEAN","boolean"),o.addProp("OBJECT","object"),o.addProp("STRING","string"),o.addProp("FUNCTION","function"),o.addProp("NUMBER","number"),o.addProp("UNDEFINED","undefined"),o.addProp("INSERT","insert"),o.addProp("UPDATE","update"),o.addProp("DELETE","delete"),Object.freeze(o),t.default=o},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){return e&&e.__esModule?e:{default:e}}(r(8));r(9).load({path:o.default.join(e,"../../.env"),sample:o.default.join(e,"../../.env.example")});const n={user:"brian",appName:"messengerBackend",debug:!0,debugLevel:"debug",debugDb:!1,debugExpress:!0,debugUnitTests:!1,stackTraceUnhandledErrors:!0,unitTestDbSuffix:"TEST_brian",host:"localhost",domain:process.env.DOMAIN,environment:"dev",port:"3100",mongo:{dbName:null,uri:null}};"test"==="dev".toLowerCase()&&process.env.TEST_ENV;n.mongo.dbName="moderation",n.mongo.uri="mongodb+srv://admin:admin123@cluster0-mozly.mongodb.net/moderation",t.default=n}).call(this,"src/config")},function(e,t){e.exports=require("mongoose")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(r(13));n(r(0));function n(e){return e&&e.__esModule?e:{default:e}}class a{}a.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},a.SUCCESS={id:1,status:200,msg:o.default.OK},a.SUCCESSFUL_UPDATE={id:22,status:201,msg:"successful update."},a.INVALID_MODERATION_FIELDS={id:400,status:422,msg:"imageId, user, and approved (true/false) are required."},a.INVALID_LIST_FILTER={id:400,status:422,msg:"filter must be 'all', 'pending', 'approved', or 'rejected.'"},a.USER_DOESNT_EXIST={id:400,status:422,msg:"That user does not exist."},Object.freeze(a),t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={user:"user",image:"image"}},function(e,t,r){"use strict";var o=s(r(6)),n=(s(r(0)),s(r(3))),a=(s(r(30)),s(r(1)));function s(e){return e&&e.__esModule?e:{default:e}}const u=e=>{const t={};if(!e)return t;const{id:r=0,status:n=500,msg:a="internal error"}=e;if(t.id=r,t.status=n,t.msg=a,o.default.get(e,"errors"))t.errors=e.errors;else{t.errors=[];const o={error:{id:r,status:n,msg:a}};e.extra&&(o.extra=e.extra),t.errors.push(o)}return t},d=(e,t,r)=>{const n=Object.assign({},e);return n&&(n.error&&(n.errors?n.errors.push({msg:n.error.msg,stack:n.error.stack}):n.errors=[{error:n.error}],delete n.error,o.default.has(n,"status")||(n.status=n.errors[0].status||500)),t.type("json"),t.status(n.status||500).send(n)),t.headersSent||r(),n};e.exports={mapToArray:e=>{const t=[];return e.forEach((e,r,o)=>{t.push(e)}),t},wrapErrorCode:e=>[{error:e}],hasOnlyOne:(e={},t=[])=>{const r=t.filter(t=>t in e).map(t=>({field:t,value:e[t]}));return 1===r.length?r:[]},processResults:d,statusObject:(e,t={})=>{const{id:r,status:o,msg:n}=e;return{id:r,status:o,msg:n,data:t}},errorObject:u,unhandledErrorObject:e=>("production"!==a.default.environment||a.default.stackTraceUnhandledErrors?console.log(e.stack):console.log(`${e.message} ${e.extra}`),"production"!==a.default.environment||a.default.debug?u(e):u(n.default.INTERNAL_ERROR)),formatTimeLeft:e=>{const t=e/60>1?e/60:1;return`${t} minute${1!==t?"s":""}`},asynced:async(e,t,r)=>{const[o,n,a]=r,s=await e[t](o);return d(s,n,a),s},asyncForEachLinear:async(e,t)=>{for(const r of e)await t(r)},asyncForEach:async(e,t)=>{await Promise.all(e.map(t))}}},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("dotenv-safe")},function(e,t){e.exports=require("http")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(r(12)),n=a(r(31));function a(e){return e&&e.__esModule?e:{default:e}}class s{constructor(){this.models=s.all}static get all(){return{user:new o.default,image:new n.default}}get all(){return Object.assign({},this.models)}}t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});s(r(6));var o=s(r(2)),n=(s(r(27)),s(r(28)),s(r(29))),a=(s(r(0)),s(r(3)),s(r(4)));s(r(5)),s(r(1));function s(e){return e&&e.__esModule?e:{default:e}}class u{static get Model(){return o.default.model(a.default.user,n.default)}get Model(){return u.Model}}t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class o{}o.OK="OK",t.default=o},function(e,t,r){"use strict";var o=u(r(15)),n=u(r(1)),a=u(r(0)),s=r(16);function u(e){return e&&e.__esModule?e:{default:e}}n.default.debug&&o.default.install({environment:a.default.NODE}),n.default.debug&&r(35),process.on("SIGTERM",()=>{console.log("SIGTERM"),(0,s.shutdown)()}),process.on("SIGINT",()=>{console.log("SIGINT"),(0,s.shutdown)()}),(0,s.startup)(),e.exports={app:s.app,server:s.server,startup:s.startup,shutdown:s.shutdown}},function(e,t){e.exports=require("source-map-support")},function(e,t,r){"use strict";E(r(6));var o=E(r(7)),n=E(r(2)),a=E(r(10)),s=E(r(17)),u=E(r(18)),d=E(r(19)),l=(E(r(20)),E(r(21))),c=(E(r(8)),E(r(22)),E(r(23))),i=E(r(24)),f=(E(r(25)),E(r(0))),p=E(r(26)),g=E(r(1)),m=E(r(33));function E(e){return e&&e.__esModule?e:{default:e}}r(9).config();let _=null;const b=(0,o.default)();b.use((0,l.default)()),b.disable("x-powered-by"),b.use((0,i.default)()),b.use((0,c.default)()),b.use((0,d.default)({origin:"*",credentials:!0,optionsSuccessStatus:200,allowedHeaders:["Content-Type","Authorization","Accept","Accept-Encoding"]})),b.use(s.default.urlencoded({extended:!1})),b.use((e,t,r)=>{s.default.json({verify(e,t,r,o){e.rawBody=r.toString()}})(e,t,e=>{if(e){const r=-1!==e.message.indexOf("JSON")?e.message:"internal error";t.status(500).send({error:{status:500,msg:r}}),console.log(f.default.ERROR,{status:e.status||500,message:e.msg,error:e})}else r()})}),b.use((0,u.default)()),b.set("trust proxy",!0),b.set(f.default.PORT,g.default.port),g.default.debug&&g.default.debugExpress&&console.log("Overriding 'Express' logger"),b.use(m.default),e.exports={app:b,httpServer:_,startup:async e=>{try{const t=e||b.get(f.default.PORT);p.default.setDebug(g.default.debug),await p.default.connect(),(_=a.default.createServer(b)).listen(t),console.log("listening at http://%s:%d",g.default.host,t)}catch(e){console.log("Error: ",e.stack)}return _},shutdown:async(e=!0)=>{console.log(`app '${g.default.appName}' terminating.`),console.log("closing server...");try{await _.close(),console.log("express server close."),await n.default.connection.close(),console.log("Mongoose default connection disconnected."),n.default.connection.removeAllListeners()}catch(e){console.log("Uncaught Shutdown Error:",e.stack)}return console.log("Finally exiting."),e&&process.exit(1),null}}},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("csurf")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("response-time")},function(e,t){e.exports=require("method-override")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=d(r(2)),n=d(r(11)),a=d(r(1)),s=d(r(0)),u=d(r(5));function d(e){return e&&e.__esModule?e:{default:e}}const l={db:null,test:!1};t.default={get:()=>l.db,setAsTest:()=>{l.test=!0},setDebug:e=>{a.default.debugDb&&(o.default.connection.removeAllListeners(),o.default.set(s.default.DEBUG,!0),a.default.debug&&console.log(`starting in debug mode; env=${a.default.environment}`),[s.default.CONNECTING,s.default.CONNECTED,s.default.OPEN,s.default.DISCONNECTING,s.default.DISCONNECTED,s.default.CLOSE,s.default.RECONNECTED,s.default.ERROR,s.default.ALL,s.default.INDEX].forEach(e=>{o.default.connection.on(e,()=>{console.log(`Mongoose event ${e}`)})}))},connect:async(e,t)=>{const r=e||`${a.default.mongo.uri}`,n=t||`${a.default.mongo.dbName}`,s={dbName:n||a.default.mongo.dbName,reconnectTries:5,reconnectInterval:500,keepAlive:!0,config:{autoIndex:!1,background:!1}};a.default.debug&&(console.log(`mongo Uri: ${r}`),console.log(`mongo Db: ${n}`));try{const e=await o.default.connect(r,s);return l.db=e,l.db}catch(e){return console.log("Error: ",e.stack),null}},createIndexes:async()=>{try{const e=n.default.all;await u.default.asyncForEach(Object.keys(e),async t=>{e[t]&&e[t].Model&&(e[t].Model.collection&&(await e[t].Model.collection.getIndexes(),await e[t].Model.collection.dropIndexes()),await e[t].Model.createIndexes())})}catch(e){return console.log(e),u.default.unhandledErrorObject(e)}}}},function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("uuid/v4")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),n=a(r(4));a(r(0));function a(e){return e&&e.__esModule?e:{default:e}}const s=new o.Schema({userId:{type:String,required:!0},user:{type:String,minlength:2,maxlength:16}},{autoIndex:!0,timestamps:!0,collection:n.default.user});s.index({accountId:1,user:1},{unique:!0}),s.index({accountId:1,userId:1},{unique:!0}),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});o(r(13)),o(r(0));function o(e){return e&&e.__esModule?e:{default:e}}class n{}n.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},n.ENUM_PROP_NOT_FOUND={id:10001,status:400,msg:"enum property does not exist."},n.INVALID_FIELD_SOURCE_TYPE={id:10001,status:400,msg:"invalid source field type, use: params or body."},n.INVALID_VALIDATION_FIELD={id:10002,status:400,msg:"that validation field is not in the validation map."},n.TEST={id:1,status:1,msg:"test"},Object.freeze(n),t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=l(r(2)),n=l(r(32)),a=l(r(12)),s=(l(r(0)),l(r(3))),u=l(r(4)),d=l(r(5));function l(e){return e&&e.__esModule?e:{default:e}}class c{static get Model(){return o.default.model(u.default.Image,n.default)}get Model(){return c.Model}async list(e={}){const{filter:t="all"}=e.params;if(!["all","pending","approved","rejected"].includes(t))return s.default.INVALID_LIST_FILTER;let r={};switch(t){case"pending":r={approved:{$exists:!1},moderatorId:{$exists:!1}};break;case"approved":r={approved:!0};break;case"rejected":r={approved:!1};break;default:r={}}try{const e=await c.Model.find(r).sort({ts:1}).lean();return{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}}async nextUnmoderated(e={}){try{const e=await c.Model.find({approved:{$exists:!1},moderatorId:{$exists:!1}}).sort({ts:1}).limit(1);return{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}}async moderate(e={}){const{imageId:t,user:r,approved:n}=e.body;if(console.log(t,r,n),!t||!r||"boolean"!=typeof n)return s.default.INVALID_MODERATION_FIELDS;const u=await a.default.Model.find({user:r}).lean();if(u.length<1)return s.default.USER_DOESNT_EXIST;const{ObjectId:l}=o.default.Types;try{const e=await c.Model.updateOne({_id:new l(t)},{$set:{moderatorId:u[0].userId,approved:n}});return{status:s.default.SUCCESS.status,data:{message:1===e.nModified}}}catch(e){return d.default.unhandledErrorObject(e)}}async moderated(e={}){try{const{user:t}=e.query;if(!t)return s.default.USER_DOESNT_EXIST;const r=await a.default.Model.find({user:t}).lean();if(r.length<1)return s.default.USER_DOESNT_EXIST;const o=await c.Model.find({moderatorId:r[0].userId}).sort({updatedAt:-1}).limit(5).skip(0).lean();return{status:s.default.SUCCESS.status,data:{message:o}}}catch(e){return d.default.unhandledErrorObject(e)}}async clear(e={}){try{const e=await c.Model.updateMany({},{$unset:{moderatorId:null,approved:null}});return{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}}}t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(2),n=a(r(4));a(r(0));function a(e){return e&&e.__esModule?e:{default:e}}const s=new o.Schema({ts:{type:Number,required:!0},url:{type:String,required:!0},moderatorId:{type:Number,default:void 0},approved:{type:Boolean,default:void 0}},{autoIndex:!0,timestamps:!0,collection:n.default.image});s.index({ts:1}),s.index({url:1},{unique:!0}),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=s(r(7)),n=(s(r(10)),s(r(0)),s(r(3)),s(r(34))),a=s(r(11));function s(e){return e&&e.__esModule?e:{default:e}}const u=o.default.Router(),d=a.default.all;u.use("/api/v1/image",n.default.routes(d.image)),u.use((e,t,r)=>{const o=new Error("Not Found");o.status=404,r(o)}),u.use((e,t,r,o)=>{const n=e.status?e.status:500;let a=`${n}: ${e.message}`;Array.isArray(a)||(a=[a]);const s={errors:a};e.data&&(s.errors=e.data),r.status(n).send(s)}),t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(r(7)),n=(a(r(0)),a(r(3)),r(5));a(n);function a(e){return e&&e.__esModule?e:{default:e}}t.default=class{static routes(e){const t=o.default.Router();return t.get("/clear",async(...t)=>{await(0,n.asynced)(e,"clear",t)}),t.get("/list",async(...t)=>{await(0,n.asynced)(e,"list",t)}),t.get("/list/:filter",async(...t)=>{await(0,n.asynced)(e,"list",t)}),t.get("/next",async(...t)=>{await(0,n.asynced)(e,"nextUnmoderated",t)}),t.put("/moderate",async(...t)=>{await(0,n.asynced)(e,"moderate",t)}),t.get("/moderated",async(...t)=>{await(0,n.asynced)(e,"moderated",t)}),console.log("####"),t}}},function(e,t,r){"use strict";var o=n(r(1));n(r(0));function n(e){return e&&e.__esModule?e:{default:e}}o.default.debug&&(process.on("unhandledRejection",(e,t)=>{console.log("unhandledRejection...");let r="";t&&(r=`Unhandled Rejection at: Promise${t}`),console.log("reason:",r,e)}),process.on("uncaughtException",e=>{console.log("Error: ",e.stack)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,