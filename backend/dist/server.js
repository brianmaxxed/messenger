module.exports=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="./dist/public/",r(r.s=14)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});r(1);class n{static addProp(e,t){if(e in n){const t=`Constant class c already has property '${e}' assigned`;throw new Error(t)}Object.defineProperty(n,e,{value:t,writable:!1})}}n.addProp("LEAN",!0),n.addProp("TRUE","true"),n.addProp("FALSE","false"),n.addProp("INDEX","index"),n.addProp("UNIQUE","unique"),n.addProp("SPARSE","sparse"),n.addProp("NESTED","NESTED"),n.addProp("PAGE_LIMIT",1e3),n.addProp("PER_PAGE_LIMIT",20),n.addProp("MULTI_PER_PAGE_LIMIT",10),n.addProp("SIGINT","SIGINT"),n.addProp("SIGTERM","SIGTERM"),n.addProp("EMPTY_STR",""),n.addProp("OFFLINE","offline"),n.addProp("DISABLED","disabled"),n.addProp("SOFT_DELETE","softDelete"),n.addProp("OPEN","open"),n.addProp("EXIT","exit"),n.addProp("CONNECTING","connecting"),n.addProp("CONNECTED","connected"),n.addProp("DISCONNECTION","disconnecting"),n.addProp("DISCONNECTED","disconnected"),n.addProp("CLOSE","close"),n.addProp("RECONNECT","reconnected"),n.addProp("ERROR","error"),n.addProp("FULLSETUP","fullsetup"),n.addProp("ALL","all"),n.addProp("BOOLEAN","boolean"),n.addProp("OBJECT","object"),n.addProp("STRING","string"),n.addProp("FUNCTION","function"),n.addProp("NUMBER","number"),n.addProp("UNDEFINED","undefined"),n.addProp("INSERT","insert"),n.addProp("UPDATE","update"),n.addProp("DELETE","delete"),Object.freeze(n),t.default=n},function(e,t,r){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return e&&e.__esModule?e:{default:e}}(r(8));r(9).load({path:n.default.join(e,"../../.env"),sample:n.default.join(e,"../../.env.example")});const o={user:"brian",appName:"messengerBackend",debug:!0,debugLevel:"debug",debugDb:!1,debugExpress:!0,debugUnitTests:!1,stackTraceUnhandledErrors:!0,unitTestDbSuffix:"TEST_brian",host:"localhost",domain:process.env.DOMAIN,environment:"dev",port:"3100",mongo:{dbName:null,uri:null}};"test"==="dev".toLowerCase()&&process.env.TEST_ENV;o.mongo.dbName="moderation",o.mongo.uri="mongodb+srv://admin:admin123@cluster0-mozly.mongodb.net/moderation",t.default=o}).call(this,"src/config")},function(e,t){e.exports=require("mongoose")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(r(13));o(r(0));function o(e){return e&&e.__esModule?e:{default:e}}class u{}u.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},u.SUCCESS={id:1,status:200,msg:n.default.OK},u.SUCCESSFUL_UPDATE={id:22,status:201,msg:"successful update."},u.INVALID_MODERATION_FIELDS={id:400,status:422,msg:"imageId, user, and approved (true/false) are required."},u.INVALID_LIST_FILTER={id:400,status:422,msg:"filter must be 'all', 'pending', 'approved', or 'rejected.'"},u.USER_DOESNT_EXIST={id:400,status:422,msg:"That user does not exist."},Object.freeze(u),t.default=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={user:"user",image:"image"}},function(e,t,r){"use strict";var n=s(r(6)),o=(s(r(0)),s(r(3))),u=(s(r(30)),s(r(1)));function s(e){return e&&e.__esModule?e:{default:e}}function a(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(o,u){try{var s=t[o](u),a=s.value}catch(e){return void r(e)}if(!s.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}("next")})}}(()=>{var e=a(function*(e){return function(t,r,n){Promise.resolve(e(t,r,n)).catch(n)}})})();const d=e=>{const t={};if(!e)return t;const{id:r=0,status:o=500,msg:u="internal error"}=e;if(t.id=r,t.status=o,t.msg=u,n.default.get(e,"errors"))t.errors=e.errors;else{t.errors=[];const n={error:{id:r,status:o,msg:u}};e.extra&&(n.extra=e.extra),t.errors.push(n)}return t},l=(e,t,r)=>{const o=Object.assign({},e);return o&&(o.error&&(o.errors?o.errors.push({msg:o.error.msg,stack:o.error.stack}):o.errors=[{error:o.error}],delete o.error,n.default.has(o,"status")||(o.status=o.errors[0].status||500)),t.type("json"),t.status(o.status||500).send(o)),t.headersSent||r(),o},i=(()=>{var e=a(function*(e,t,r){const[n,o,u]=r,s=yield e[t](n);return l(s,o,u),s});return function(t,r,n){return e.apply(this,arguments)}})(),c=(()=>{var e=a(function*(e,t){for(const r of e)yield t(r)});return function(t,r){return e.apply(this,arguments)}})(),f=(()=>{var e=a(function*(e,t){yield Promise.all(e.map(t))});return function(t,r){return e.apply(this,arguments)}})();e.exports={mapToArray:e=>{const t=[];return e.forEach((e,r,n)=>{t.push(e)}),t},wrapErrorCode:e=>[{error:e}],hasOnlyOne:(e={},t=[])=>{const r=t.filter(t=>t in e).map(t=>({field:t,value:e[t]}));return 1===r.length?r:[]},processResults:l,statusObject:(e,t={})=>{const{id:r,status:n,msg:o}=e;return{id:r,status:n,msg:o,data:t}},errorObject:d,unhandledErrorObject:e=>("production"!==u.default.environment||u.default.stackTraceUnhandledErrors?console.log(e.stack):console.log(`${e.message} ${e.extra}`),"production"!==u.default.environment||u.default.debug?d(e):d(o.default.INTERNAL_ERROR)),formatTimeLeft:e=>{const t=e/60>1?e/60:1;return`${t} minute${1!==t?"s":""}`},asynced:i,asyncForEachLinear:c,asyncForEach:f}},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("express")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("dotenv-safe")},function(e,t){e.exports=require("http")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=u(r(12)),o=u(r(31));function u(e){return e&&e.__esModule?e:{default:e}}class s{constructor(){this.models=s.all}static get all(){return{user:new n.default,image:new o.default}}get all(){return Object.assign({},this.models)}}t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});s(r(6));var n=s(r(2)),o=(s(r(27)),s(r(28)),s(r(29))),u=(s(r(0)),s(r(3)),s(r(4)));s(r(5)),s(r(1));function s(e){return e&&e.__esModule?e:{default:e}}class a{static get Model(){return n.default.model(u.default.user,o.default)}get Model(){return a.Model}}t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class n{}n.OK="OK",t.default=n},function(e,t,r){"use strict";var n=a(r(15)),o=a(r(1)),u=a(r(0)),s=r(16);function a(e){return e&&e.__esModule?e:{default:e}}o.default.debug&&n.default.install({environment:u.default.NODE}),o.default.debug&&r(35),process.on("SIGTERM",()=>{console.log("SIGTERM"),(0,s.shutdown)()}),process.on("SIGINT",()=>{console.log("SIGINT"),(0,s.shutdown)()}),(0,s.startup)(),e.exports={app:s.app,server:s.server,startup:s.startup,shutdown:s.shutdown}},function(e,t){e.exports=require("source-map-support")},function(e,t,r){"use strict";E(r(6));var n=E(r(7)),o=E(r(2)),u=E(r(10)),s=E(r(17)),a=E(r(18)),d=E(r(19)),l=(E(r(20)),E(r(21))),i=(E(r(8)),E(r(22)),E(r(23))),c=E(r(24)),f=(E(r(25)),E(r(0))),p=E(r(26)),g=E(r(1)),m=E(r(33));function E(e){return e&&e.__esModule?e:{default:e}}function v(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(o,u){try{var s=t[o](u),a=s.value}catch(e){return void r(e)}if(!s.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}("next")})}}r(9).config();let y=null;const _=(0,n.default)(),h=(()=>{var e=v(function*(e){try{const t=e||_.get(f.default.PORT);p.default.setDebug(g.default.debug),yield p.default.connect(),(y=u.default.createServer(_)).listen(t),console.log("listening at http://%s:%d",g.default.host,t)}catch(e){console.log("Error: ",e.stack)}return y});return function(t){return e.apply(this,arguments)}})(),I=(()=>{var e=v(function*(e=!0){console.log(`app '${g.default.appName}' terminating.`),console.log("closing server...");try{yield y.close(),console.log("express server close."),yield o.default.connection.close(),console.log("Mongoose default connection disconnected."),o.default.connection.removeAllListeners()}catch(e){console.log("Uncaught Shutdown Error:",e.stack)}return console.log("Finally exiting."),e&&process.exit(1),null});return function(){return e.apply(this,arguments)}})();_.use((0,l.default)()),_.disable("x-powered-by"),_.use((0,c.default)()),_.use((0,i.default)()),_.use((0,d.default)({origin:"*",credentials:!0,optionsSuccessStatus:200,allowedHeaders:["Content-Type","Authorization","Accept","Accept-Encoding"]})),_.use(s.default.urlencoded({extended:!1})),_.use((e,t,r)=>{s.default.json({verify(e,t,r,n){e.rawBody=r.toString()}})(e,t,e=>{if(e){const r=-1!==e.message.indexOf("JSON")?e.message:"internal error";t.status(500).send({error:{status:500,msg:r}}),console.log(f.default.ERROR,{status:e.status||500,message:e.msg,error:e})}else r()})}),_.use((0,a.default)()),_.set("trust proxy",!0),_.set(f.default.PORT,g.default.port),g.default.debug&&g.default.debugExpress&&console.log("Overriding 'Express' logger"),_.use(m.default),e.exports={app:_,httpServer:y,startup:h,shutdown:I}},function(e,t){e.exports=require("body-parser")},function(e,t){e.exports=require("cookie-parser")},function(e,t){e.exports=require("cors")},function(e,t){e.exports=require("csurf")},function(e,t){e.exports=require("helmet")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("compression")},function(e,t){e.exports=require("response-time")},function(e,t){e.exports=require("method-override")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=d(r(2)),o=d(r(11)),u=d(r(1)),s=d(r(0)),a=d(r(5));function d(e){return e&&e.__esModule?e:{default:e}}function l(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(o,u){try{var s=t[o](u),a=s.value}catch(e){return void r(e)}if(!s.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}("next")})}}const i={db:null,test:!1},c=(()=>{var e=l(function*(){try{const e=o.default.all;yield a.default.asyncForEach(Object.keys(e),(()=>{var t=l(function*(t){e[t]&&e[t].Model&&(e[t].Model.collection&&(yield e[t].Model.collection.getIndexes(),yield e[t].Model.collection.dropIndexes()),yield e[t].Model.createIndexes())});return function(e){return t.apply(this,arguments)}})())}catch(e){return console.log(e),a.default.unhandledErrorObject(e)}});return function(){return e.apply(this,arguments)}})(),f=(()=>{var e=l(function*(e,t){const r=e||`${u.default.mongo.uri}`,o=t||`${u.default.mongo.dbName}`,s={dbName:o||u.default.mongo.dbName,reconnectTries:5,reconnectInterval:500,keepAlive:!0,config:{autoIndex:!1,background:!1}};u.default.debug&&(console.log(`mongo Uri: ${r}`),console.log(`mongo Db: ${o}`));try{const e=yield n.default.connect(r,s);return i.db=e,i.db}catch(e){return console.log("Error: ",e.stack),null}});return function(t,r){return e.apply(this,arguments)}})();t.default={get:()=>i.db,setAsTest:()=>{i.test=!0},setDebug:e=>{u.default.debugDb&&(n.default.connection.removeAllListeners(),n.default.set(s.default.DEBUG,!0),u.default.debug&&console.log(`starting in debug mode; env=${u.default.environment}`),[s.default.CONNECTING,s.default.CONNECTED,s.default.OPEN,s.default.DISCONNECTING,s.default.DISCONNECTED,s.default.CLOSE,s.default.RECONNECTED,s.default.ERROR,s.default.ALL,s.default.INDEX].forEach(e=>{n.default.connection.on(e,()=>{console.log(`Mongoose event ${e}`)})}))},connect:f,createIndexes:c}},function(e,t){e.exports=require("moment")},function(e,t){e.exports=require("uuid/v4")},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=u(r(4));u(r(0));function u(e){return e&&e.__esModule?e:{default:e}}const s=new n.Schema({userId:{type:String,required:!0},user:{type:String,minlength:2,maxlength:16}},{autoIndex:!0,timestamps:!0,collection:o.default.user});s.index({accountId:1,user:1},{unique:!0}),s.index({accountId:1,userId:1},{unique:!0}),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n(r(13)),n(r(0));function n(e){return e&&e.__esModule?e:{default:e}}class o{}o.INTERNAL_ERROR={id:500,status:500,msg:"internal error."},o.ENUM_PROP_NOT_FOUND={id:10001,status:400,msg:"enum property does not exist."},o.INVALID_FIELD_SOURCE_TYPE={id:10001,status:400,msg:"invalid source field type, use: params or body."},o.INVALID_VALIDATION_FIELD={id:10002,status:400,msg:"that validation field is not in the validation map."},o.TEST={id:1,status:1,msg:"test"},Object.freeze(o),t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=l(r(2)),o=l(r(32)),u=l(r(12)),s=(l(r(0)),l(r(3))),a=l(r(4)),d=l(r(5));function l(e){return e&&e.__esModule?e:{default:e}}function i(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(o,u){try{var s=t[o](u),a=s.value}catch(e){return void r(e)}if(!s.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}("next")})}}class c{static get Model(){return n.default.model(a.default.Image,o.default)}get Model(){return c.Model}list(e={}){return i(function*(){const{filter:t="all"}=e.params;if(!["all","pending","approved","rejected"].includes(t))return s.default.INVALID_LIST_FILTER;let r={};switch(t){case"pending":r={approved:{$exists:!1},moderatorId:{$exists:!1}};break;case"approved":r={approved:!0};break;case"rejected":r={approved:!1};break;default:r={}}try{const e=yield c.Model.find(r).sort({ts:1}).lean();return{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}})()}nextUnmoderated(e={}){return i(function*(){console.log("!!!");const{user:t}=e.query;if(!t)return s.default.USER_DOESNT_EXIST;const r=yield u.default.Model.find({user:t}).lean();if(r.length<1)return s.default.USER_DOESNT_EXIST;try{const e=yield c.Model.find({$and:[{approved:{$exists:!1}},{$or:[{moderatorId:{$exists:!1}},{moderatorId:r[0].userId}]}]}).sort({moderatorId:-1,ts:1}).limit(2).lean();let t;return console.log(e),r[0].moderatorId||(t=yield c.Model.updateOne({_id:e[0]._id},{$set:{moderatorId:r[0].userId}}),console.log(t)),{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}})()}moderate(e={}){return i(function*(){const{imageId:t,user:r,approved:o}=e.body;if(console.log(t,r,o),!t||!r||"boolean"!=typeof o)return s.default.INVALID_MODERATION_FIELDS;const a=yield u.default.Model.find({user:r}).lean();if(a.length<1)return s.default.USER_DOESNT_EXIST;const{ObjectId:l}=n.default.Types;try{const e=yield c.Model.updateOne({_id:new l(t)},{$set:{moderatorId:a[0].userId,approved:o}});return{status:s.default.SUCCESS.status,data:{message:1===e.nModified}}}catch(e){return d.default.unhandledErrorObject(e)}})()}moderated(e={}){return i(function*(){try{const{user:t}=e.query;if(!t)return s.default.USER_DOESNT_EXIST;const r=yield u.default.Model.find({user:t}).lean();if(r.length<1)return s.default.USER_DOESNT_EXIST;const n=yield c.Model.find({moderatorId:r[0].userId,approved:{$exists:!0}}).sort({updatedAt:-1}).limit(5).skip(0).lean();return{status:s.default.SUCCESS.status,data:{message:n}}}catch(e){return d.default.unhandledErrorObject(e)}})()}clear(e={}){return i(function*(){try{const e=yield c.Model.updateMany({},{$unset:{moderatorId:null,approved:null}});return{status:s.default.SUCCESS.status,data:{message:e}}}catch(e){return d.default.unhandledErrorObject(e)}})()}}t.default=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2),o=u(r(4));u(r(0));function u(e){return e&&e.__esModule?e:{default:e}}const s=new n.Schema({ts:{type:Number,required:!0},url:{type:String,required:!0},moderatorId:{type:Number,default:void 0},approved:{type:Boolean,default:void 0}},{autoIndex:!0,timestamps:!0,collection:o.default.image});s.index({ts:1}),s.index({url:1},{unique:!0}),t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=s(r(7)),o=(s(r(10)),s(r(0)),s(r(3)),s(r(34))),u=s(r(11));function s(e){return e&&e.__esModule?e:{default:e}}const a=n.default.Router(),d=u.default.all;a.use("/api/v1/image",o.default.routes(d.image)),a.use((e,t,r)=>{const n=new Error("Not Found");n.status=404,r(n)}),a.use((e,t,r,n)=>{const o=e.status?e.status:500;let u=`${o}: ${e.message}`;Array.isArray(u)||(u=[u]);const s={errors:u};e.data&&(s.errors=e.data),r.status(o).send(s)}),t.default=a},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=u(r(7)),o=(u(r(0)),u(r(3)),r(5));u(o);function u(e){return e&&e.__esModule?e:{default:e}}function s(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,r){return function n(o,u){try{var s=t[o](u),a=s.value}catch(e){return void r(e)}if(!s.done)return Promise.resolve(a).then(function(e){n("next",e)},function(e){n("throw",e)});e(a)}("next")})}}t.default=class{static routes(e){const t=n.default.Router();return t.get("/clear",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"clear",t)});return function(){return t.apply(this,arguments)}})()),t.get("/list",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"list",t)});return function(){return t.apply(this,arguments)}})()),t.get("/list/:filter",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"list",t)});return function(){return t.apply(this,arguments)}})()),t.get("/next",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"nextUnmoderated",t)});return function(){return t.apply(this,arguments)}})()),t.put("/moderate",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"moderate",t)});return function(){return t.apply(this,arguments)}})()),t.get("/moderated",(()=>{var t=s(function*(...t){yield(0,o.asynced)(e,"moderated",t)});return function(){return t.apply(this,arguments)}})()),console.log("####"),t}}},function(e,t,r){"use strict";var n=o(r(1));o(r(0));function o(e){return e&&e.__esModule?e:{default:e}}n.default.debug&&(process.on("unhandledRejection",(e,t)=>{console.log("unhandledRejection...");let r="";t&&(r=`Unhandled Rejection at: Promise${t}`),console.log("reason:",r,e)}),process.on("uncaughtException",e=>{console.log("Error: ",e.stack)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,